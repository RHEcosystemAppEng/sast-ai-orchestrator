1. Get the application URL by running these commands:
{{- if .Values.route.enabled }}
  export ROUTE_HOST=$(oc get route {{ include "sast-ai.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.host}')
  echo "Application URL: http{{ if .Values.route.tls.enabled }}s{{ end }}://$ROUTE_HOST{{ .Values.route.path }}"
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(oc get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "sast-ai.fullname" . }})
  export NODE_IP=$(oc get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'oc get --namespace {{ .Release.Namespace }} svc -w {{ include "sast-ai.fullname" . }}'
  export SERVICE_IP=$(oc get svc --namespace {{ .Release.Namespace }} {{ include "sast-ai.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(oc get pods --namespace {{ .Release.Namespace }} -l "{{ include "sast-ai.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(oc get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  oc --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the application health:
{{- if .Values.route.enabled }}
  export ROUTE_HOST=$(oc get route {{ include "sast-ai.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.host}')
  curl http{{ if .Values.route.tls.enabled }}s{{ end }}://$ROUTE_HOST/health
{{- else }}
  oc --namespace {{ .Release.Namespace }} port-forward svc/{{ include "sast-ai.fullname" . }} 8080:{{ .Values.service.port }}
  curl http://localhost:8080/health
{{- end }}

3. View application logs:
  oc --namespace {{ .Release.Namespace }} logs -f deployment/{{ include "sast-ai.fullname" . }}

4. Database connection information:
{{- if .Values.postgresql.enabled }}
  Database Host: {{ include "sast-ai.postgresql.host" . }}
  Database Port: {{ include "sast-ai.postgresql.port" . }}
  Database Name: {{ include "sast-ai.postgresql.database" . }}
  Database User: {{ include "sast-ai.postgresql.username" . }}
  
  To connect to the database:
  oc --namespace {{ .Release.Namespace }} port-forward svc/{{ .Release.Name }}-postgresql 5432:5432
  PGPASSWORD={{ .Values.postgresql.auth.password }} psql -h localhost -p 5432 -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}
{{- else }}
  Using external database: {{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}/{{ .Values.externalDatabase.database }}
{{- end }}

5. Useful OpenShift commands:
  # Scale the application
  oc --namespace {{ .Release.Namespace }} scale deployment {{ include "sast-ai.fullname" . }} --replicas=3
  
  # Restart the application
  oc --namespace {{ .Release.Namespace }} rollout restart deployment {{ include "sast-ai.fullname" . }}
  
  # View all resources
  oc --namespace {{ .Release.Namespace }} get all -l app.kubernetes.io/instance={{ .Release.Name }}
  
  # View the route
  oc --namespace {{ .Release.Namespace }} get route {{ include "sast-ai.fullname" . }}

{{- if .Values.hpa.enabled }}
6. Horizontal Pod Autoscaler is enabled:
  oc --namespace {{ .Release.Namespace }} get hpa {{ include "sast-ai.fullname" . }}
{{- end }}

{{- if .Values.monitoring.enabled }}
7. Monitoring is enabled:
  - ServiceMonitor has been created for Prometheus integration
  - Metrics are available at /metrics endpoint
{{- end }}

For more information, visit the deployment documentation: https://github.com/redhat/sast-ai/tree/main/deploy 